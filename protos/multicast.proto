// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package multicast;

//
// Multicast
//
//   Multicast (logical view) :
//   +------------------------------------------------------------+
//   |   name        : “1.1.1.1.226.0.0.1”                                   |
//   |   description : “Create a group of receivers for a stream“ |
//   +------------------------------------------------------------+
//

// Multicast service definition.
service MulticastService {
  // Add group
  rpc AddGroup(CreateRequest)      	returns (CreateResponse) {};

  // Update existing group
  rpc UpdateGroup(UpdateRequest)   	returns (UpdateResponse) {};

  // Delete group
  rpc DeleteGroup(DeleteRequest)   	returns (DeleteResponse) {};
    
  // Query Operational state
  rpc GetGroupState(GetRequest)     	returns (GetResponse) {};

  // Monitor group state
  rpc MonitorGroupState(MonRequest) 	returns (stream MonResponse) {};
}


// Add multicast group request
message CreateRequest {
  string 	name          	= 1;
  string 	description   	= 2;
  
  IpAddress     source        	= 3;
  IpAddress     group         	= 4;
  repeated IpAddress receivers	= 5;
  Attributes    attributes    	= 6;
}

// Add multicast group response
message CreateResponse {
  string 	name		= 1;
  Status	status        	= 2;
  OperState	oper_state	= 3;
  string 	error_message  	= 4;
}

// Update multicast group request
message UpdateRequest {
  string 	name          	= 1;
  repeated IpAddress receivers	= 2;
  Attributes    attributes    	= 3;
}

// Update multicast group response
message UpdateResponse {
  string 	name		= 1;
  Status	status        	= 2;
  OperState	oper_state	= 3;
  string 	error_message  	= 4;
}

// Delete multicast group request
message DeleteRequest {
  string 	name          	= 1;
}

// Delete multicast group response
message DeleteResponse {
  string 	name		= 1;
  string 	error_message  	= 2;
}

// Get multicast group request
message GetRequest {
  string 	name          	= 1;
}

// Get multicast group response
message GetResponse {
  string 	name          	= 1;
  string 	description   	= 2;
  
  IpAddress     source        	= 3;
  IpAddress     group         	= 4;
  repeated IpAddress receivers	= 5;
  Attributes    attributes    	= 6;

  OperState	oper_state	= 7;
}

// Monitor multicast group request
message MonRequest {
  string 	name          	= 1;
}

// Monitor multicast group response
message MonResponse {
  string 	name          	= 1;
  OperState	oper_state	= 2;
}

message IPAddress {
  string 	ip_address 	= 1;
}

message Attributes {
  bool 	join_load_balance	= 1;
}

enum Status {
  SUCCESS = 0;
  FAILURE = 1;
}

// Operational state of a multicast group
message OperState {
  bool 		active		= 1;
  uint32	statistics	= 2;
}
